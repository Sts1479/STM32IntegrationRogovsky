
DAC_tm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da8  08003da8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000080  08003e38  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08003e38  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e63c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e2  00000000  00000000  0002e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00031488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024fbb  00000000  00000000  00032048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a15f  00000000  00000000  00057003  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1b49  00000000  00000000  00061162  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132cab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003818  00000000  00000000  00132d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d5c 	.word	0x08003d5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08003d5c 	.word	0x08003d5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
}
/* USER CODE END 0 */
uint16_t ADCVal;
uint32_t counter = 0;
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 f815 	bl	80014fc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8bb 	bl	800064c <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f973 	bl	80007c0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80004da:	f000 f9c9 	bl	8000870 <_ZL12MX_TIM1_Initv>
  MX_DAC_Init();
 80004de:	f000 f92f 	bl	8000740 <_ZL11MX_DAC_Initv>
  MX_ADC1_Init();
 80004e2:	f000 fa51 	bl	8000988 <_ZL12MX_ADC1_Initv>

  HAL_TIM_Base_Start_IT(&htim1);
 80004e6:	4812      	ldr	r0, [pc, #72]	; (8000530 <main+0x68>)
 80004e8:	f002 fd35 	bl	8002f56 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start (&hdac, DAC_CHANNEL_1);
 80004ec:	2100      	movs	r1, #0
 80004ee:	4811      	ldr	r0, [pc, #68]	; (8000534 <main+0x6c>)
 80004f0:	f001 fe71 	bl	80021d6 <HAL_DAC_Start>
  HAL_DAC_Start (&hdac, DAC_CHANNEL_2);
 80004f4:	2110      	movs	r1, #16
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x6c>)
 80004f8:	f001 fe6d 	bl	80021d6 <HAL_DAC_Start>
  /* USER CODE END 2 */
  HAL_ADC_Start(&hadc1);
 80004fc:	480e      	ldr	r0, [pc, #56]	; (8000538 <main+0x70>)
 80004fe:	f001 f8b3 	bl	8001668 <HAL_ADC_Start>
  bool i = true;
 8000502:	2301      	movs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <main+0x68>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	691b      	ldr	r3, [r3, #16]
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b01      	cmp	r3, #1
 8000512:	d101      	bne.n	8000518 <main+0x50>
 8000514:	2301      	movs	r3, #1
 8000516:	e000      	b.n	800051a <main+0x52>
 8000518:	2300      	movs	r3, #0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f3      	beq.n	8000506 <main+0x3e>
	  	 {
		  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <main+0x68>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f06f 0201 	mvn.w	r2, #1
 8000526:	611a      	str	r2, [r3, #16]


		  TimHandler();
 8000528:	f000 f808 	bl	800053c <_Z10TimHandlerv>
	  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
 800052c:	e7eb      	b.n	8000506 <main+0x3e>
 800052e:	bf00      	nop
 8000530:	2000009c 	.word	0x2000009c
 8000534:	200000dc 	.word	0x200000dc
 8000538:	200000f0 	.word	0x200000f0

0800053c <_Z10TimHandlerv>:
  }

}


void TimHandler (){
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
	//  if(__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC))	          {

	 uint16_t ADC_Data;
	 ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000542:	4838      	ldr	r0, [pc, #224]	; (8000624 <_Z10TimHandlerv+0xe8>)
 8000544:	f001 fa97 	bl	8001a76 <HAL_ADC_GetValue>
 8000548:	4603      	mov	r3, r0
 800054a:	81fb      	strh	r3, [r7, #14]
	 }
    */

    //Fout = IntegratorI.FIRsmooth((float)ADC_Data);

	 PersC = IntegratorI.PeriodStepCalcQ((int)ADC_Data,0);
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	4835      	ldr	r0, [pc, #212]	; (8000628 <_Z10TimHandlerv+0xec>)
 8000554:	f000 fb06 	bl	8000b64 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	4b33      	ldr	r3, [pc, #204]	; (800062c <_Z10TimHandlerv+0xf0>)
 800055e:	801a      	strh	r2, [r3, #0]
	if (PersC < 36 || PersC >43){
 8000560:	4b32      	ldr	r3, [pc, #200]	; (800062c <_Z10TimHandlerv+0xf0>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	2b23      	cmp	r3, #35	; 0x23
 8000566:	d903      	bls.n	8000570 <_Z10TimHandlerv+0x34>
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <_Z10TimHandlerv+0xf0>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	2b2b      	cmp	r3, #43	; 0x2b
 800056e:	d903      	bls.n	8000578 <_Z10TimHandlerv+0x3c>
	    	Pers = 40;
 8000570:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <_Z10TimHandlerv+0xf4>)
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	801a      	strh	r2, [r3, #0]
 8000576:	e003      	b.n	8000580 <_Z10TimHandlerv+0x44>
	}
	else {
		   Pers = PersC;
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <_Z10TimHandlerv+0xf0>)
 800057a:	881a      	ldrh	r2, [r3, #0]
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <_Z10TimHandlerv+0xf4>)
 800057e:	801a      	strh	r2, [r3, #0]
	}
	//++cperch;

	// Pers = 40;

	if (max < ADC_Data) {
 8000580:	89fa      	ldrh	r2, [r7, #14]
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <_Z10TimHandlerv+0xf8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	dd02      	ble.n	8000590 <_Z10TimHandlerv+0x54>
		max = ADC_Data;
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <_Z10TimHandlerv+0xf8>)
 800058e:	6013      	str	r3, [r2, #0]
	}

	if (min > ADC_Data) {
 8000590:	89fa      	ldrh	r2, [r7, #14]
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <_Z10TimHandlerv+0xfc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	da02      	bge.n	80005a0 <_Z10TimHandlerv+0x64>
		min = ADC_Data;
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <_Z10TimHandlerv+0xfc>)
 800059e:	6013      	str	r3, [r2, #0]
	}

	oldADC = ADC_Data;
 80005a0:	89fb      	ldrh	r3, [r7, #14]
 80005a2:	4a26      	ldr	r2, [pc, #152]	; (800063c <_Z10TimHandlerv+0x100>)
 80005a4:	6013      	str	r3, [r2, #0]
	int Out1 = IntegratorI.IntegStepC((int)ADC_Data,2048,1,Pers); // integration
 80005a6:	89f9      	ldrh	r1, [r7, #14]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <_Z10TimHandlerv+0xf4>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b4:	481c      	ldr	r0, [pc, #112]	; (8000628 <_Z10TimHandlerv+0xec>)
 80005b6:	f000 fb89 	bl	8000ccc <_ZN10IntegratorIiLj100EE10IntegStepCEiiit>
 80005ba:	60b8      	str	r0, [r7, #8]
    int Out2 = (int)(4*coeff*Out1);
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <_Z10TimHandlerv+0x104>)
 80005be:	edd3 7a00 	vldr	s15, [r3]
 80005c2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80005c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	ee07 3a90 	vmov	s15, r3
 80005d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005dc:	ee17 3a90 	vmov	r3, s15
 80005e0:	607b      	str	r3, [r7, #4]
    if (abs(Out2) > 8000) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bfb8      	it	lt
 80005e8:	425b      	neglt	r3, r3
 80005ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80005ee:	dd03      	ble.n	80005f8 <_Z10TimHandlerv+0xbc>
    	dd = 2048;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <_Z10TimHandlerv+0x108>)
 80005f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005f6:	801a      	strh	r2, [r3, #0]
    }
    int intOutM = IntegratorI.MeanStepDel(Out2,40);
 80005f8:	2228      	movs	r2, #40	; 0x28
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <_Z10TimHandlerv+0xec>)
 80005fe:	f000 fc05 	bl	8000e0c <_ZN10IntegratorIiLj100EE11MeanStepDelEit>
 8000602:	6038      	str	r0, [r7, #0]
   // int intOutD = IntegratorI.DeltaInverse(intOutM,20,2048);
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,intOutM); //..to DAC Channel 1
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	480f      	ldr	r0, [pc, #60]	; (8000648 <_Z10TimHandlerv+0x10c>)
 800060c:	f001 fe96 	bl	800233c <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R,ADC_Data);// ..to DAC Channel 2
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	2200      	movs	r2, #0
 8000614:	2110      	movs	r1, #16
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <_Z10TimHandlerv+0x10c>)
 8000618:	f001 fe90 	bl	800233c <HAL_DAC_SetValue>
	 // }
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000f0 	.word	0x200000f0
 8000628:	20000138 	.word	0x20000138
 800062c:	200006a8 	.word	0x200006a8
 8000630:	2000000c 	.word	0x2000000c
 8000634:	200006a0 	.word	0x200006a0
 8000638:	20000008 	.word	0x20000008
 800063c:	200006a4 	.word	0x200006a4
 8000640:	20000004 	.word	0x20000004
 8000644:	200006aa 	.word	0x200006aa
 8000648:	200000dc 	.word	0x200000dc

0800064c <_Z18SystemClock_Configv>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <_Z18SystemClock_Configv+0xe8>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a36      	ldr	r2, [pc, #216]	; (8000734 <_Z18SystemClock_Configv+0xe8>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <_Z18SystemClock_Configv+0xe8>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <_Z18SystemClock_Configv+0xec>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a30      	ldr	r2, [pc, #192]	; (8000738 <_Z18SystemClock_Configv+0xec>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <_Z18SystemClock_Configv+0xec>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a2:	23a8      	movs	r3, #168	; 0xa8
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f81c 	bl	80026f0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf14      	ite	ne
 80006be:	2301      	movne	r3, #1
 80006c0:	2300      	moveq	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 80006c8:	f000 f9b2 	bl	8000a30 <_Z13Error_Handlerv>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fa42 	bl	8002b74 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000700:	f000 f996 	bl	8000a30 <_Z13Error_Handlerv>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000704:	f002 fbf0 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8000708:	4602      	mov	r2, r0
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <_Z18SystemClock_Configv+0xf0>)
 800070c:	fba3 2302 	umull	r2, r3, r3, r2
 8000710:	099b      	lsrs	r3, r3, #6
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fd07 	bl	8002126 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000718:	2004      	movs	r0, #4
 800071a:	f001 fd11 	bl	8002140 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000726:	f001 fcd4 	bl	80020d2 <HAL_NVIC_SetPriority>
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000
 800073c:	10624dd3 	.word	0x10624dd3

08000740 <_ZL11MX_DAC_Initv>:

/* DAC init function */
static void MX_DAC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <_ZL11MX_DAC_Initv+0x78>)
 8000748:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <_ZL11MX_DAC_Initv+0x7c>)
 800074a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800074c:	481a      	ldr	r0, [pc, #104]	; (80007b8 <_ZL11MX_DAC_Initv+0x78>)
 800074e:	f001 fd20 	bl	8002192 <HAL_DAC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <_ZL11MX_DAC_Initv+0x26>
  {
    Error_Handler();
 8000762:	f000 f965 	bl	8000a30 <_Z13Error_Handlerv>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <_ZL11MX_DAC_Initv+0x78>)
 8000776:	f001 fd94 	bl	80022a2 <HAL_DAC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <_ZL11MX_DAC_Initv+0x4e>
  {
    Error_Handler();
 800078a:	f000 f951 	bl	8000a30 <_Z13Error_Handlerv>
  }
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2210      	movs	r2, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <_ZL11MX_DAC_Initv+0x78>)
 8000796:	f001 fd84 	bl	80022a2 <HAL_DAC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <_ZL11MX_DAC_Initv+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f941 	bl	8000a30 <_Z13Error_Handlerv>
  }


}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000dc 	.word	0x200000dc
 80007bc:	40007400 	.word	0x40007400

080007c0 <_ZL12MX_GPIO_Initv>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a25      	ldr	r2, [pc, #148]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <_ZL12MX_GPIO_Initv+0xa4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480e      	ldr	r0, [pc, #56]	; (8000868 <_ZL12MX_GPIO_Initv+0xa8>)
 800082e:	f001 fdab 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000832:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <_ZL12MX_GPIO_Initv+0xac>)
 800084c:	f001 fd9c 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <_ZL12MX_GPIO_Initv+0xac>)
 8000858:	f001 ff30 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */


}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020c00 	.word	0x40020c00

08000870 <_ZL12MX_TIM1_Initv>:

static void MX_TIM1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089a:	4b39      	ldr	r3, [pc, #228]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 800089c:	4a39      	ldr	r2, [pc, #228]	; (8000984 <_ZL12MX_TIM1_Initv+0x114>)
 800089e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler =10500-1;
 80008a0:	4b37      	ldr	r3, [pc, #220]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008a2:	f642 1203 	movw	r2, #10499	; 0x2903
 80008a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b35      	ldr	r3, [pc, #212]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c6:	482e      	ldr	r0, [pc, #184]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008c8:	f002 fb1a 	bl	8002f00 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 80008dc:	f000 f8a8 	bl	8000a30 <_Z13Error_Handlerv>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4824      	ldr	r0, [pc, #144]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 80008ee:	f002 fd2f 	bl	8003350 <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8000902:	f000 f895 	bl	8000a30 <_Z13Error_Handlerv>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000906:	481e      	ldr	r0, [pc, #120]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 8000908:	f002 fb49 	bl	8002f9e <HAL_TIM_IC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 800091c:	f000 f888 	bl	8000a30 <_Z13Error_Handlerv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 8000930:	f003 f85c 	bl	80039ec <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8000944:	f000 f874 	bl	8000a30 <_Z13Error_Handlerv>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800094c:	2301      	movs	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4808      	ldr	r0, [pc, #32]	; (8000980 <_ZL12MX_TIM1_Initv+0x110>)
 8000960:	f002 fc5a 	bl	8003218 <HAL_TIM_IC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	bf14      	ite	ne
 800096a:	2301      	movne	r3, #1
 800096c:	2300      	moveq	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8000974:	f000 f85c 	bl	8000a30 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000009c 	.word	0x2000009c
 8000984:	40010000 	.word	0x40010000

08000988 <_ZL12MX_ADC1_Initv>:

static void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 800099c:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <_ZL12MX_ADC1_Initv+0xa4>)
 800099e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2020 	strb.w	r2, [r3, #32]
  //hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  //hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  //hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 80009dc:	f000 fe00 	bl	80015e0 <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <_ZL12MX_ADC1_Initv+0x6c>
  {
    Error_Handler();
 80009f0:	f000 f81e 	bl	8000a30 <_Z13Error_Handlerv>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]

  //sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <_ZL12MX_ADC1_Initv+0xa0>)
 8000a06:	f001 f861 	bl	8001acc <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf14      	ite	ne
 8000a10:	2301      	movne	r3, #1
 8000a12:	2300      	moveq	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8000a1a:	f000 f809 	bl	8000a30 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000f0 	.word	0x200000f0
 8000a2c:	40012000 	.word	0x40012000

08000a30 <_Z13Error_Handlerv>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000a34:	e7fe      	b.n	8000a34 <_Z13Error_Handlerv+0x4>
	...

08000a38 <_ZN10IntegratorIiLj100EEC1Ev>:
	T _stdOld = 0;
#define FIRorder 10U
#define Nper 150U

public:
	Integrator() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4a38      	ldr	r2, [pc, #224]	; (8000b24 <_ZN10IntegratorIiLj100EEC1Ev+0xec>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	831a      	strh	r2, [r3, #24]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	835a      	strh	r2, [r3, #26]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	645a      	str	r2, [r3, #68]	; 0x44
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	649a      	str	r2, [r3, #72]	; 0x48
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	655a      	str	r2, [r3, #84]	; 0x54
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3358      	adds	r3, #88	; 0x58
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fa00 	bl	8000eb6 <_ZN7RingBufIiLj100EEC1Ev>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f9fa 	bl	8000eb6 <_ZN7RingBufIiLj100EEC1Ev>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f9f4 	bl	8000eb6 <_ZN7RingBufIiLj100EEC1Ev>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa01 	bl	8000edc <_ZN7RingBufIiLj10EEC1Ev>
	  _Buff = new T[max];
 8000ada:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ade:	f002 ffe0 	bl	8003aa2 <_Znaj>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
	  _BuffM = new T[max];
 8000aea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000aee:	f002 ffd8 	bl	8003aa2 <_Znaj>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
	  _BuffP = new T[max];
 8000afa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000afe:	f002 ffd0 	bl	8003aa2 <_Znaj>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
	  _BuffF = new T[max];
 8000b0a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b0e:	f002 ffc8 	bl	8003aa2 <_Znaj>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30

	};
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	08003d88 	.word	0x08003d88

08000b28 <_ZN6SimGenIfEC1Ef>:
  int _nHarms = 3;
  T _ampHarms[3] = {1, 1, 1};
  int _perCount = 0;
  float _SampleFreq;
 public:
 SimGen (float sf = 3200): _SampleFreq(sf){};
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	ed87 0a00 	vstr	s0, [r7]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2203      	movs	r2, #3
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <_ZN6SimGenIfEC1Ef+0x38>)
 8000b3e:	3304      	adds	r3, #4
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	08003d74 	.word	0x08003d74

08000b64 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii>:
				}
			}
			return periodOut;
		}

	uint16_t PeriodStepCalcQ (T In, T meanVal) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
		    uint16_t periodOut = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	847b      	strh	r3, [r7, #34]	; 0x22
			T pIn, pInOld;
			float delta;
			int pCounter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
			int pN = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			int p = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
			T esum;
			_sumP+=In;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	441a      	add	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	63da      	str	r2, [r3, #60]	; 0x3c
			if(!buff3.add(In,true)){
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8000b92:	f107 0108 	add.w	r1, r7, #8
 8000b96:	2201      	movs	r2, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f9b1 	bl	8000f00 <_ZN7RingBufIiLj100EE3addERKib>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8088 	beq.w	8000cbc <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x158>
				esum = *buff3.peek(0);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f9e9 	bl	8000f8c <_ZN7RingBufIiLj100EE4peekEj>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	61fb      	str	r3, [r7, #28]
				_sumP -=esum;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
				meanVal = _sumP/(max);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x164>)
 8000bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	607b      	str	r3, [r7, #4]
				//meanVal = 0;
				for (int i=0;i<max-1;i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	2b62      	cmp	r3, #98	; 0x62
 8000be4:	d86a      	bhi.n	8000cbc <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x158>
					pIn = *buff3.peek(i);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8000bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f9cb 	bl	8000f8c <_ZN7RingBufIiLj100EE4peekEj>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	61bb      	str	r3, [r7, #24]
					pInOld = *buff3.peek(i+1);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f503 7262 	add.w	r2, r3, #904	; 0x388
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	3301      	adds	r3, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	4610      	mov	r0, r2
 8000c0a:	f000 f9bf 	bl	8000f8c <_ZN7RingBufIiLj100EE4peekEj>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	617b      	str	r3, [r7, #20]
					pIn = pIn - meanVal;
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	61bb      	str	r3, [r7, #24]
					pInOld = pInOld - meanVal;
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
					++pCounter;
 8000c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c26:	3301      	adds	r3, #1
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
					if (pIn != pInOld && abs(pInOld) != abs(pIn) ){
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d01c      	beq.n	8000c6c <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x108>
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c38:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bfb8      	it	lt
 8000c42:	425b      	neglt	r3, r3
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d011      	beq.n	8000c6c <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x108>
					delta = abs((pIn-pInOld)/(pIn+pInOld));
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	1ad2      	subs	r2, r2, r3
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	440b      	add	r3, r1
 8000c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	bfb8      	it	lt
 8000c5c:	425b      	neglt	r3, r3
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8000c6a:	e002      	b.n	8000c72 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x10e>
					}
					else delta = 0.5;
 8000c6c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
					if (delta>=1) {
 8000c72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c82:	db17      	blt.n	8000cb4 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x150>
						if (p < 2){
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	dc08      	bgt.n	8000c9c <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x138>
							if (p < 1){
 8000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dc01      	bgt.n	8000c94 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x130>
								pN = pCounter;
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
							}
							++p;
 8000c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c96:	3301      	adds	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c9a:	e00b      	b.n	8000cb4 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x150>
						}
						else {
							p = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
							periodOut = pCounter-pN;
 8000ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	847b      	strh	r3, [r7, #34]	; 0x22
							pN = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
							return periodOut;
 8000cb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cb2:	e004      	b.n	8000cbe <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x15a>
				for (int i=0;i<max-1;i++) {
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cba:	e791      	b.n	8000be0 <_ZN10IntegratorIiLj100EE15PeriodStepCalcQEii+0x7c>
					 }
				}
				}
			}
			return periodOut;
 8000cbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
		}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3738      	adds	r7, #56	; 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	51eb851f 	.word	0x51eb851f

08000ccc <_ZN10IntegratorIiLj100EE10IntegStepCEiiit>:
	T IntegStepC(T in, T calib, T coeff, uint16_t cPer){
 8000ccc:	b480      	push	{r7}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
		T meanVal = calib;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
		++_cint;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	605a      	str	r2, [r3, #4]
		T corrValue = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
		T stdVal = 0;;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
		for (int i = 0;i < cPer-1;i++){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
 8000cf4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6a3a      	ldr	r2, [r7, #32]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	da10      	bge.n	8000d20 <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0x54>
			 _Buff[i] = _Buff[i+1];
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	3301      	adds	r3, #1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	441a      	add	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	601a      	str	r2, [r3, #0]
		for (int i = 0;i < cPer-1;i++){
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	e7e9      	b.n	8000cf4 <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0x28>
		_Buff[cPer-1] = in;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	601a      	str	r2, [r3, #0]
		for (int i = 0;i < cPer;i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	da0e      	bge.n	8000d5e <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0x92>
			 _sum += _Buff[i];
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	441a      	add	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
		for (int i = 0;i < cPer;i++){
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	e7ec      	b.n	8000d38 <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0x6c>
		if (_cint > cPer) {
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dd38      	ble.n	8000dda <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0x10e>
			meanVal = _sum/cPer;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
			_cint = max;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2264      	movs	r2, #100	; 0x64
 8000d78:	605a      	str	r2, [r3, #4]
			_sum = 0;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
			_sumStd = 0;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2200      	movs	r2, #0
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
         if (meanVal - _meanOld > 20 || meanVal>3000 )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b14      	cmp	r3, #20
 8000d90:	dc04      	bgt.n	8000d9c <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0xd0>
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	dd05      	ble.n	8000da8 <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0xdc>
        	 _corrMean +=10;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f103 020a 	add.w	r2, r3, #10
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	64da      	str	r2, [r3, #76]	; 0x4c
         if (meanVal - _meanOld < -20 || meanVal<300)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	f113 0f14 	cmn.w	r3, #20
 8000db4:	db03      	blt.n	8000dbe <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0xf2>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000dbc:	da05      	bge.n	8000dca <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0xfe>
        	 _corrMean +=-10;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f1a3 020a 	sub.w	r2, r3, #10
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	64da      	str	r2, [r3, #76]	; 0x4c
         if (meanVal == _meanOld) {
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d102      	bne.n	8000dda <_ZN10IntegratorIiLj100EE10IntegStepCEiiit+0x10e>
        		 _corrMean = 0;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	64da      	str	r2, [r3, #76]	; 0x4c
         _meanOld = meanVal;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dde:	651a      	str	r2, [r3, #80]	; 0x50
		_buffout+=(in-meanVal+_corrMean);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a1a      	ldr	r2, [r3, #32]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	440b      	add	r3, r1
 8000df0:	441a      	add	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	621a      	str	r2, [r3, #32]
		return coeff*_buffout;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
	};
 8000e00:	4618      	mov	r0, r3
 8000e02:	372c      	adds	r7, #44	; 0x2c
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZN10IntegratorIiLj100EE11MeanStepDelEit>:
	T MeanStepDel (T in, uint16_t cPer){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]
		T meanVal = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
		++_cintM;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	609a      	str	r2, [r3, #8]
		for (int i = 0;i < cPer-1;i++){
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	da10      	bge.n	8000e58 <_ZN10IntegratorIiLj100EE11MeanStepDelEit+0x4c>
			 _BuffM[i] = _BuffM[i+1];
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	441a      	add	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	601a      	str	r2, [r3, #0]
		for (int i = 0;i < cPer-1;i++){
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	3301      	adds	r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e7e9      	b.n	8000e2c <_ZN10IntegratorIiLj100EE11MeanStepDelEit+0x20>
		_BuffM[cPer-1] = in;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e62:	3b01      	subs	r3, #1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	601a      	str	r2, [r3, #0]
		_sumM +=in;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	441a      	add	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
		if (_cintM > max){
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d911      	bls.n	8000ea4 <_ZN10IntegratorIiLj100EE11MeanStepDelEit+0x98>
			_sumM -=_BuffM[0];
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
			_cintM = max+2;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2266      	movs	r2, #102	; 0x66
 8000e94:	609a      	str	r2, [r3, #8]
			meanVal = _sumM/(cPer+1);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
		return 	in - meanVal;
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	1ad3      	subs	r3, r2, r3
	}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_ZN7RingBufIiLj100EEC1Ev>:
template <typename Type, size_t MaxElements>
class RingBuf
{
public:

RingBuf()
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
{
     RB_ATOMIC_START
     {
         _numElements = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

         _head = 0;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
     }
     RB_ATOMIC_END
}
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN7RingBufIiLj10EEC1Ev>:
RingBuf()
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
         _numElements = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
         _head = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_ZN7RingBufIiLj100EE3addERKib>:
* the oldest element will either be overwritten (when overwrite is true) or
* this add will have no effect (when overwrite is false).
*
* Return: true if there was room in the buffer to add this element
*/
bool add(const Type &obj, bool overwrite=false)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71fb      	strb	r3, [r7, #7]
{
    bool full = false;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]
    RB_ATOMIC_START
    {
        full = isFull();
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 f860 	bl	8000fd8 <_ZNK7RingBufIiLj100EE6isFullEv>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
        if (!full || overwrite) {
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_ZN7RingBufIiLj100EE3addERKib+0x2e>
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d024      	beq.n	8000f78 <_ZN7RingBufIiLj100EE3addERKib+0x78>
            _buf[_head] = obj;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            _head = (_head + 1)%MaxElements;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_ZN7RingBufIiLj100EE3addERKib+0x88>)
 8000f48:	fba3 1302 	umull	r1, r3, r3, r2
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	2164      	movs	r1, #100	; 0x64
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
            _numElements = full ? _numElements : (_numElements + 1);
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <_ZN7RingBufIiLj100EE3addERKib+0x6a>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f68:	e003      	b.n	8000f72 <_ZN7RingBufIiLj100EE3addERKib+0x72>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f70:	3301      	adds	r3, #1
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
        }
    }
    RB_ATOMIC_END

    return !full;
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	51eb851f 	.word	0x51eb851f

08000f8c <_ZN7RingBufIiLj100EE4peekEj>:

/**
* Peek at num'th element in the buffer
* Return: a pointer to the num'th element
*/
Type* peek(size_t num)
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
{
    Type *ret = NULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]

    RB_ATOMIC_START
    {
        if (num < _numElements) //make sure not out of bounds
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d211      	bcs.n	8000fca <_ZN7RingBufIiLj100EE4peekEj+0x3e>
            ret = &_buf[(getTail() + num)%MaxElements];
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f82a 	bl	8001000 <_ZNK7RingBufIiLj100EE7getTailEv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_ZN7RingBufIiLj100EE4peekEj+0x48>)
 8000fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	fb01 f303 	mul.w	r3, r1, r3
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
    }
    RB_ATOMIC_END

    return ret;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	51eb851f 	.word	0x51eb851f

08000fd8 <_ZNK7RingBufIiLj100EE6isFullEv>:


/**
* Return: true if buffer is full
*/
bool isFull() const
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
{
    bool ret;

    RB_ATOMIC_START
    {
        ret = _numElements >= MaxElements;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000fe6:	2b63      	cmp	r3, #99	; 0x63
 8000fe8:	bf8c      	ite	hi
 8000fea:	2301      	movhi	r3, #1
 8000fec:	2300      	movls	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
    }
    RB_ATOMIC_END

    return ret;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_ZNK7RingBufIiLj100EE7getTailEv>:
protected:
/**
* Calculates the index in the array of the oldest element
* Return: index in array of element
*/
size_t getTail() const
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
{
    return (_head + (MaxElements - _numElements))%MaxElements;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_ZNK7RingBufIiLj100EE7getTailEv+0x38>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	2164      	movs	r1, #100	; 0x64
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	1ad3      	subs	r3, r2, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	51eb851f 	.word	0x51eb851f

0800103c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler */ 
}
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10f      	bne.n	800106c <_Z41__static_initialization_and_destruction_0ii+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001052:	4293      	cmp	r3, r2
 8001054:	d10a      	bne.n	800106c <_Z41__static_initialization_and_destruction_0ii+0x30>
Integrator<int,NpointsPeriod> IntegratorI; // <datatype>
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001058:	f7ff fcee 	bl	8000a38 <_ZN10IntegratorIiLj100EEC1Ev>
SimGen<float> simgen(SampleFreq);
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	480b      	ldr	r0, [pc, #44]	; (8001094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001068:	f7ff fd5e 	bl	8000b28 <_ZN6SimGenIfEC1Ef>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	4293      	cmp	r3, r2
 800107a:	d102      	bne.n	8001082 <_Z41__static_initialization_and_destruction_0ii+0x46>
Integrator<int,NpointsPeriod> IntegratorI; // <datatype>
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800107e:	f000 f80b 	bl	8001098 <_ZN10IntegratorIiLj100EED1Ev>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000138 	.word	0x20000138
 8001090:	20000000 	.word	0x20000000
 8001094:	20000688 	.word	0x20000688

08001098 <_ZN10IntegratorIiLj100EED1Ev>:
	virtual ~Integrator(){};
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <_ZN10IntegratorIiLj100EED1Ev+0x1c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	08003d88 	.word	0x08003d88

080010b8 <_ZN10IntegratorIiLj100EED0Ev>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe9 	bl	8001098 <_ZN10IntegratorIiLj100EED1Ev>
 80010c6:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f002 fce7 	bl	8003a9e <_ZdlPvj>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_GLOBAL__sub_I_tim6_counter>:
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
 80010de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010e2:	2001      	movs	r0, #1
 80010e4:	f7ff ffaa 	bl	800103c <_Z41__static_initialization_and_destruction_0ii>
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_GLOBAL__sub_D_tim6_counter>:
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ffa2 	bl	800103c <_Z41__static_initialization_and_destruction_0ii>
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_MspInit+0xa0>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_MspInit+0xa0>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <HAL_MspInit+0xa0>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_MspInit+0xa0>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_MspInit+0xa0>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_MspInit+0xa0>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113a:	2003      	movs	r0, #3
 800113c:	f000 ffbe 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	f06f 000b 	mvn.w	r0, #11
 8001148:	f000 ffc3 	bl	80020d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	f06f 000a 	mvn.w	r0, #10
 8001154:	f000 ffbd 	bl	80020d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	f06f 0009 	mvn.w	r0, #9
 8001160:	f000 ffb7 	bl	80020d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	f06f 0004 	mvn.w	r0, #4
 800116c:	f000 ffb1 	bl	80020d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	f06f 0003 	mvn.w	r0, #3
 8001178:	f000 ffab 	bl	80020d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	f06f 0001 	mvn.w	r0, #1
 8001184:	f000 ffa5 	bl	80020d2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	f000 ff9f 	bl	80020d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_ADC_MspInit+0x8c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12f      	bne.n	8001222 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_ADC_MspInit+0x90>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_ADC_MspInit+0x90>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_ADC_MspInit+0x90>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_MspInit+0x90>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_ADC_MspInit+0x90>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_ADC_MspInit+0x90>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <HAL_ADC_MspInit+0x94>)
 800120e:	f001 f8bb 	bl	8002388 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2012      	movs	r0, #18
 8001218:	f000 ff5b 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800121c:	2012      	movs	r0, #18
 800121e:	f000 ff74 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40012000 	.word	0x40012000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_DAC_MspInit+0x50>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d119      	bne.n	800127e <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_DAC_MspInit+0x54>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_DAC_MspInit+0x54>)
 8001254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_DAC_MspInit+0x54>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001266:	2310      	movs	r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_DAC_MspInit+0x58>)
 800127a:	f001 f885 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40007400 	.word	0x40007400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_TIM_Base_MspInit+0x94>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d134      	bne.n	8001320 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_TIM_Base_MspInit+0x98>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_TIM_Base_MspInit+0x98>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_TIM_Base_MspInit+0x98>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_TIM_Base_MspInit+0x98>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_TIM_Base_MspInit+0x98>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_TIM_Base_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001300:	2301      	movs	r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x9c>)
 800130c:	f001 f83c 	bl	8002388 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2019      	movs	r0, #25
 8001316:	f000 fedc 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800131a:	2019      	movs	r0, #25
 800131c:	f000 fef5 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40010000 	.word	0x40010000
 800132c:	40023800 	.word	0x40023800
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 f918 	bl	80015a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001370:	f000 ff02 	bl	8002178 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800137e:	f001 fe43 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000009c 	.word	0x2000009c

0800138c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <ADC_IRQHandler+0x10>)
 8001392:	f000 fa2f 	bl	80017f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000f0 	.word	0x200000f0

080013a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ba:	f002 fb97 	bl	8003aec <__errno>
 80013be:	4602      	mov	r2, r0
 80013c0:	2316      	movs	r3, #22
 80013c2:	6013      	str	r3, [r2, #0]
	return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_exit>:

void _exit (int status)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe7 	bl	80013b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013e2:	e7fe      	b.n	80013e2 <_exit+0x12>

080013e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x50>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x16>
		heap_end = &end;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <_sbrk+0x50>)
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <_sbrk+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <_sbrk+0x50>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <_sbrk+0x50>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	466a      	mov	r2, sp
 800140a:	4293      	cmp	r3, r2
 800140c:	d907      	bls.n	800141e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800140e:	f002 fb6d 	bl	8003aec <__errno>
 8001412:	4602      	mov	r2, r0
 8001414:	230c      	movs	r3, #12
 8001416:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141c:	e006      	b.n	800142c <_sbrk+0x48>
	}

	heap_end += incr;
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <_sbrk+0x50>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <_sbrk+0x50>)
 8001428:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200006ac 	.word	0x200006ac
 8001438:	200006c8 	.word	0x200006c8

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <SystemInit+0x60>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <SystemInit+0x60>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <SystemInit+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <SystemInit+0x64>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <SystemInit+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <SystemInit+0x64>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <SystemInit+0x64>)
 8001468:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800146c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <SystemInit+0x64>)
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <SystemInit+0x68>)
 8001476:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <SystemInit+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <SystemInit+0x64>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SystemInit+0x60>)
 800148c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001490:	609a      	str	r2, [r3, #8]
#endif
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	24003010 	.word	0x24003010

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ae:	e003      	b.n	80014b8 <LoopCopyDataInit>

080014b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014b6:	3104      	adds	r1, #4

080014b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014c0:	d3f6      	bcc.n	80014b0 <CopyDataInit>
  ldr  r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014c4:	e002      	b.n	80014cc <LoopFillZerobss>

080014c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014c8:	f842 3b04 	str.w	r3, [r2], #4

080014cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014d0:	d3f9      	bcc.n	80014c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014d2:	f7ff ffb3 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f002 fb0f 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7fe fff5 	bl	80004c8 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014e4:	08003db8 	.word	0x08003db8
  ldr  r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014ec:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80014f0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80014f4:	200006c4 	.word	0x200006c4

080014f8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <CAN1_RX0_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 fdc9 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f808 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fde4 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fde1 	bl	8002126 <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800157c:	f000 fda9 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000010 	.word	0x20000010
 8001598:	20000018 	.word	0x20000018
 800159c:	20000014 	.word	0x20000014

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000018 	.word	0x20000018
 80015c4:	200006bc 	.word	0x200006bc

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200006bc 	.word	0x200006bc

080015e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e033      	b.n	800165e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fdce 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001626:	f023 0302 	bic.w	r3, r3, #2
 800162a:	f043 0202 	orr.w	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fb6c 	bl	8001d10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
 800164e:	e001      	b.n	8001654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Start+0x1a>
 800167e:	2302      	movs	r3, #2
 8001680:	e0a5      	b.n	80017ce <HAL_ADC_Start+0x166>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d018      	beq.n	80016ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_ADC_Start+0x174>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <HAL_ADC_Start+0x178>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9a      	lsrs	r2, r3, #18
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d179      	bne.n	80017cc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001702:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001716:	d106      	bne.n	8001726 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f023 0206 	bic.w	r2, r3, #6
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
 8001724:	e002      	b.n	800172c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_ADC_Start+0x17c>)
 8001736:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001740:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2b00      	cmp	r3, #0
 800174c:	d12a      	bne.n	80017a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_ADC_Start+0x180>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d015      	beq.n	8001784 <HAL_ADC_Start+0x11c>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <HAL_ADC_Start+0x184>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d105      	bne.n	800176e <HAL_ADC_Start+0x106>
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_ADC_Start+0x17c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_ADC_Start+0x188>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d129      	bne.n	80017cc <HAL_ADC_Start+0x164>
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_ADC_Start+0x17c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d823      	bhi.n	80017cc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d11c      	bne.n	80017cc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	e013      	b.n	80017cc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <HAL_ADC_Start+0x180>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_ADC_Start+0x164>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017ca:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000010 	.word	0x20000010
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	40012300 	.word	0x40012300
 80017e8:	40012000 	.word	0x40012000
 80017ec:	40012100 	.word	0x40012100
 80017f0:	40012200 	.word	0x40012200

080017f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b20      	cmp	r3, #32
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d049      	beq.n	80018ca <HAL_ADC_IRQHandler+0xd6>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d046      	beq.n	80018ca <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d12b      	bne.n	80018ba <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d127      	bne.n	80018ba <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001882:	2b00      	cmp	r3, #0
 8001884:	d119      	bne.n	80018ba <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0220 	bic.w	r2, r2, #32
 8001894:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8e8 	bl	8001a90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0212 	mvn.w	r2, #18
 80018c8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b80      	cmp	r3, #128	; 0x80
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d057      	beq.n	80019ac <HAL_ADC_IRQHandler+0x1b8>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d054      	beq.n	80019ac <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d139      	bne.n	800199c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001940:	2b00      	cmp	r3, #0
 8001942:	d12b      	bne.n	800199c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d124      	bne.n	800199c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11d      	bne.n	800199c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d119      	bne.n	800199c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001976:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fab3 	bl	8001f08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f06f 020c 	mvn.w	r2, #12
 80019aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d017      	beq.n	8001a0e <HAL_ADC_IRQHandler+0x21a>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d014      	beq.n	8001a0e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10d      	bne.n	8001a0e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f850 	bl	8001aa4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0201 	mvn.w	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x27a>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d012      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f043 0202 	orr.w	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0220 	mvn.w	r2, #32
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f82a 	bl	8001ab8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0220 	mvn.w	r2, #32
 8001a6c:	601a      	str	r2, [r3, #0]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1c>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e105      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x228>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	d925      	bls.n	8001b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68d9      	ldr	r1, [r3, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4403      	add	r3, r0
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	e022      	b.n	8001b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	2207      	movs	r2, #7
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4403      	add	r3, r0
 8001b80:	409a      	lsls	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d824      	bhi.n	8001bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b05      	subs	r3, #5
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bda:	e04c      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d824      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b23      	subs	r3, #35	; 0x23
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	400a      	ands	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b23      	subs	r3, #35	; 0x23
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2c:	e023      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b41      	subs	r3, #65	; 0x41
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b41      	subs	r3, #65	; 0x41
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_ADC_ConfigChannel+0x234>)
 8001c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <HAL_ADC_ConfigChannel+0x238>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1cc>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_ADC_ConfigChannel+0x238>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d123      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x21e>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d003      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x1e6>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b11      	cmp	r3, #17
 8001cb0:	d11b      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d111      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_ADC_ConfigChannel+0x23c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_ADC_ConfigChannel+0x240>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9a      	lsrs	r2, r3, #18
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40012300 	.word	0x40012300
 8001d04:	40012000 	.word	0x40012000
 8001d08:	20000010 	.word	0x20000010
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d18:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <ADC_Init+0x1f0>)
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <ADC_Init+0x1f4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6899      	ldr	r1, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e00f      	b.n	8001e0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0202 	bic.w	r2, r2, #2
 8001e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
 8001e28:	005a      	lsls	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01b      	beq.n	8001e74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	035a      	lsls	r2, r3, #13
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e007      	b.n	8001e84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	051a      	lsls	r2, r3, #20
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec6:	025a      	lsls	r2, r3, #9
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	029a      	lsls	r2, r3, #10
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40012300 	.word	0x40012300
 8001f04:	0f000001 	.word	0x0f000001

08001f08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d106      	bne.n	800215c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800215a:	e005      	b.n	8002168 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800217c:	f000 f802 	bl	8002184 <HAL_SYSTICK_Callback>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e014      	b.n	80021ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	791b      	ldrb	r3, [r3, #4]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff f83f 	bl	8001238 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	795b      	ldrb	r3, [r3, #5]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_DAC_Start+0x1e>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e050      	b.n	8002296 <HAL_DAC_Start+0xc0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	409a      	lsls	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11a      	bne.n	8002250 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002230:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d127      	bne.n	8002288 <HAL_DAC_Start+0xb2>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b38      	cmp	r3, #56	; 0x38
 800223c:	d124      	bne.n	8002288 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e01b      	b.n	8002288 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002266:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226e:	d10b      	bne.n	8002288 <HAL_DAC_Start+0xb2>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002276:	d107      	bne.n	8002288 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0202 	orr.w	r2, r2, #2
 8002286:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	795b      	ldrb	r3, [r3, #5]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DAC_ConfigChannel+0x20>
 80022be:	2302      	movs	r3, #2
 80022c0:	e036      	b.n	8002330 <HAL_DAC_ConfigChannel+0x8e>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2202      	movs	r2, #2
 80022cc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80022d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	22c0      	movs	r2, #192	; 0xc0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43da      	mvns	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	400a      	ands	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	3308      	adds	r3, #8
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e004      	b.n	8002370 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3314      	adds	r3, #20
 800236e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e16b      	b.n	800267c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 815a 	bne.w	8002676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x4a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b12      	cmp	r3, #18
 80023d0:	d123      	bne.n	800241a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0203 	and.w	r2, r3, #3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d00b      	beq.n	800246e <HAL_GPIO_Init+0xe6>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002462:	2b11      	cmp	r3, #17
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b12      	cmp	r3, #18
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80b4 	beq.w	8002676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_GPIO_Init+0x308>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_GPIO_Init+0x308>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_GPIO_Init+0x308>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a5a      	ldr	r2, [pc, #360]	; (8002694 <HAL_GPIO_Init+0x30c>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_GPIO_Init+0x310>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x226>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_GPIO_Init+0x314>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x222>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <HAL_GPIO_Init+0x318>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x21e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4e      	ldr	r2, [pc, #312]	; (80026a4 <HAL_GPIO_Init+0x31c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x21a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <HAL_GPIO_Init+0x320>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x216>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4c      	ldr	r2, [pc, #304]	; (80026ac <HAL_GPIO_Init+0x324>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x212>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_GPIO_Init+0x328>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x20e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4a      	ldr	r2, [pc, #296]	; (80026b4 <HAL_GPIO_Init+0x32c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x20a>
 800258e:	2307      	movs	r3, #7
 8002590:	e00e      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 8002592:	2308      	movs	r3, #8
 8002594:	e00c      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 8002596:	2306      	movs	r3, #6
 8002598:	e00a      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 800259a:	2305      	movs	r3, #5
 800259c:	e008      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 800259e:	2304      	movs	r3, #4
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025ae:	2300      	movs	r3, #0
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4093      	lsls	r3, r2
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c0:	4934      	ldr	r1, [pc, #208]	; (8002694 <HAL_GPIO_Init+0x30c>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <HAL_GPIO_Init+0x330>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_GPIO_Init+0x330>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_GPIO_Init+0x330>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_GPIO_Init+0x330>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_GPIO_Init+0x330>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_GPIO_Init+0x330>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_GPIO_Init+0x330>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_GPIO_Init+0x330>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3301      	adds	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	f67f ae90 	bls.w	80023a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40021c00 	.word	0x40021c00
 80026b8:	40013c00 	.word	0x40013c00

080026bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d8:	e003      	b.n	80026e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	041a      	lsls	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	619a      	str	r2, [r3, #24]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e22d      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d075      	beq.n	80027fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	4ba3      	ldr	r3, [pc, #652]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00c      	beq.n	8002734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d112      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b9d      	ldr	r3, [pc, #628]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4b99      	ldr	r3, [pc, #612]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x108>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d157      	bne.n	80027f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e208      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x74>
 8002756:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a90      	ldr	r2, [pc, #576]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x98>
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a8a      	ldr	r2, [pc, #552]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a87      	ldr	r2, [pc, #540]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a83      	ldr	r2, [pc, #524]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a80      	ldr	r2, [pc, #512]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe ff0e 	bl	80015c8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe ff0a 	bl	80015c8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1cd      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fefa 	bl	80015c8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fef6 	bl	80015c8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1b9      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0xe8>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d063      	beq.n	80028ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e18d      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b56      	ldr	r3, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4952      	ldr	r1, [pc, #328]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	e03a      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_OscConfig+0x2b0>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe feaf 	bl	80015c8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286e:	f7fe feab 	bl	80015c8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e16e      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4940      	ldr	r1, [pc, #256]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_OscConfig+0x2b0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fe8e 	bl	80015c8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe fe8a 	bl	80015c8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e14d      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d030      	beq.n	800293c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e2:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <HAL_RCC_OscConfig+0x2b4>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fe6e 	bl	80015c8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe fe6a 	bl	80015c8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e12d      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x200>
 800290e:	e015      	b.n	800293c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_OscConfig+0x2b4>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fe57 	bl	80015c8 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe fe53 	bl	80015c8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e116      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a0 	beq.w	8002a8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x2b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d121      	bne.n	80029ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_RCC_OscConfig+0x2b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_RCC_OscConfig+0x2b8>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe fe19 	bl	80015c8 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e011      	b.n	80029be <HAL_RCC_OscConfig+0x2ce>
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
 80029a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fe fe0c 	bl	80015c8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0cf      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x478>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a65      	ldr	r2, [pc, #404]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	e01c      	b.n	8002a1a <HAL_RCC_OscConfig+0x32a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x312>
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a5f      	ldr	r2, [pc, #380]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e00b      	b.n	8002a1a <HAL_RCC_OscConfig+0x32a>
 8002a02:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a59      	ldr	r2, [pc, #356]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d015      	beq.n	8002a4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe fdd1 	bl	80015c8 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fdcd 	bl	80015c8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e08e      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ee      	beq.n	8002a2a <HAL_RCC_OscConfig+0x33a>
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fdbb 	bl	80015c8 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fdb7 	bl	80015c8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e078      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a3a      	ldr	r2, [pc, #232]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d064      	beq.n	8002b5c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d05c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d141      	bne.n	8002b2a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_RCC_OscConfig+0x480>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fd8c 	bl	80015c8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fd88 	bl	80015c8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04b      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	491d      	ldr	r1, [pc, #116]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_RCC_OscConfig+0x480>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fd61 	bl	80015c8 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fd5d 	bl	80015c8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e020      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x41a>
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCC_OscConfig+0x480>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fd4a 	bl	80015c8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fd46 	bl	80015c8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_RCC_OscConfig+0x47c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x448>
 8002b56:	e001      	b.n	8002b5c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	42470060 	.word	0x42470060

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0ca      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <HAL_RCC_ClockConfig+0x1b4>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b6      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a57      	ldr	r2, [pc, #348]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494c      	ldr	r1, [pc, #304]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d044      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07d      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06d      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e065      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4933      	ldr	r1, [pc, #204]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fcb0 	bl	80015c8 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe fcac 	bl	80015c8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04d      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCC_ClockConfig+0x1b4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20c      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_ClockConfig+0x1b4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e030      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4915      	ldr	r1, [pc, #84]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490d      	ldr	r1, [pc, #52]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f81d 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4601      	mov	r1, r0
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fc12 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08003d90 	.word	0x08003d90
 8002d34:	20000010 	.word	0x20000010

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	2300      	movs	r3, #0
 8002d48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d007      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x32>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x38>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 80b4 	bne.w	8002ecc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d66:	60bb      	str	r3, [r7, #8]
       break;
 8002d68:	e0b3      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	e0b0      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d70:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7a:	4b58      	ldr	r3, [pc, #352]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d04a      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b55      	ldr	r3, [pc, #340]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	f04f 0400 	mov.w	r4, #0
 8002d90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	ea03 0501 	and.w	r5, r3, r1
 8002d9c:	ea04 0602 	and.w	r6, r4, r2
 8002da0:	4629      	mov	r1, r5
 8002da2:	4632      	mov	r2, r6
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	f04f 0400 	mov.w	r4, #0
 8002dac:	0154      	lsls	r4, r2, #5
 8002dae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db2:	014b      	lsls	r3, r1, #5
 8002db4:	4619      	mov	r1, r3
 8002db6:	4622      	mov	r2, r4
 8002db8:	1b49      	subs	r1, r1, r5
 8002dba:	eb62 0206 	sbc.w	r2, r2, r6
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	f04f 0400 	mov.w	r4, #0
 8002dc6:	0194      	lsls	r4, r2, #6
 8002dc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dcc:	018b      	lsls	r3, r1, #6
 8002dce:	1a5b      	subs	r3, r3, r1
 8002dd0:	eb64 0402 	sbc.w	r4, r4, r2
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	00e2      	lsls	r2, r4, #3
 8002dde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002de2:	00d9      	lsls	r1, r3, #3
 8002de4:	460b      	mov	r3, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	195b      	adds	r3, r3, r5
 8002dea:	eb44 0406 	adc.w	r4, r4, r6
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	0262      	lsls	r2, r4, #9
 8002df8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002dfc:	0259      	lsls	r1, r3, #9
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4614      	mov	r4, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	4621      	mov	r1, r4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f04f 0400 	mov.w	r4, #0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4623      	mov	r3, r4
 8002e10:	f7fd f9da 	bl	80001c8 <__aeabi_uldivmod>
 8002e14:	4603      	mov	r3, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e049      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	ea03 0501 	and.w	r5, r3, r1
 8002e32:	ea04 0602 	and.w	r6, r4, r2
 8002e36:	4629      	mov	r1, r5
 8002e38:	4632      	mov	r2, r6
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f04f 0400 	mov.w	r4, #0
 8002e42:	0154      	lsls	r4, r2, #5
 8002e44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e48:	014b      	lsls	r3, r1, #5
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	1b49      	subs	r1, r1, r5
 8002e50:	eb62 0206 	sbc.w	r2, r2, r6
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	f04f 0400 	mov.w	r4, #0
 8002e5c:	0194      	lsls	r4, r2, #6
 8002e5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	1a5b      	subs	r3, r3, r1
 8002e66:	eb64 0402 	sbc.w	r4, r4, r2
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	00e2      	lsls	r2, r4, #3
 8002e74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e78:	00d9      	lsls	r1, r3, #3
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	195b      	adds	r3, r3, r5
 8002e80:	eb44 0406 	adc.w	r4, r4, r6
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	02a2      	lsls	r2, r4, #10
 8002e8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e92:	0299      	lsls	r1, r3, #10
 8002e94:	460b      	mov	r3, r1
 8002e96:	4614      	mov	r4, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f04f 0400 	mov.w	r4, #0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	f7fd f98f 	bl	80001c8 <__aeabi_uldivmod>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	60bb      	str	r3, [r7, #8]
      break;
 8002eca:	e002      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ece:	60bb      	str	r3, [r7, #8]
      break;
 8002ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	007a1200 	.word	0x007a1200

08002ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000010 	.word	0x20000010

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e01d      	b.n	8002f4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f9b4 	bl	8001294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 faf0 	bl	8003524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d007      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e01d      	b.n	8002fec <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f815 	bl	8002ff4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 faa1 	bl	8003524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b02      	cmp	r3, #2
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa4b 	bl	80034e6 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa3d 	bl	80034d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa4e 	bl	80034fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa21 	bl	80034e6 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa13 	bl	80034d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa24 	bl	80034fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0208 	mvn.w	r2, #8
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9f7 	bl	80034e6 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9e9 	bl	80034d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f9fa 	bl	80034fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9cd 	bl	80034e6 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f9bf 	bl	80034d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f9d0 	bl	80034fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0201 	mvn.w	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f999 	bl	80034be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fc69 	bl	8003a8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f995 	bl	800350e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0220 	mvn.w	r2, #32
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fc33 	bl	8003a76 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_TIM_IC_ConfigChannel+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e08a      	b.n	8003348 <HAL_TIM_IC_ConfigChannel+0x130>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f000 fa04 	bl	8003664 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 020c 	bic.w	r2, r2, #12
 800326a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
 800327e:	e05a      	b.n	8003336 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b04      	cmp	r3, #4
 8003284:	d11c      	bne.n	80032c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f000 fa88 	bl	80037aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6999      	ldr	r1, [r3, #24]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	619a      	str	r2, [r3, #24]
 80032be:	e03a      	b.n	8003336 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f000 fad5 	bl	8003884 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 020c 	bic.w	r2, r2, #12
 80032e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]
 80032fc:	e01b      	b.n	8003336 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f000 faf5 	bl	80038fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003320:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69d9      	ldr	r1, [r3, #28]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIM_ConfigClockSource+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e0a6      	b.n	80034b6 <HAL_TIM_ConfigClockSource+0x166>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d067      	beq.n	8003470 <HAL_TIM_ConfigClockSource+0x120>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d80b      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x6c>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d073      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x140>
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d802      	bhi.n	80033b2 <HAL_TIM_ConfigClockSource+0x62>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d06f      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033b0:	e078      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d06c      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x140>
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d06a      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033ba:	e073      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033bc:	2b70      	cmp	r3, #112	; 0x70
 80033be:	d00d      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x8c>
 80033c0:	2b70      	cmp	r3, #112	; 0x70
 80033c2:	d804      	bhi.n	80033ce <HAL_TIM_ConfigClockSource+0x7e>
 80033c4:	2b50      	cmp	r3, #80	; 0x50
 80033c6:	d033      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0xe0>
 80033c8:	2b60      	cmp	r3, #96	; 0x60
 80033ca:	d041      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033cc:	e06a      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	d066      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x152>
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	d017      	beq.n	800340a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033da:	e063      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f000 fade 	bl	80039ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	609a      	str	r2, [r3, #8]
      break;
 8003408:	e04c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f000 fac7 	bl	80039ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800342c:	609a      	str	r2, [r3, #8]
      break;
 800342e:	e039      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	461a      	mov	r2, r3
 800343e:	f000 f985 	bl	800374c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2150      	movs	r1, #80	; 0x50
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fa94 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 800344e:	e029      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	461a      	mov	r2, r3
 800345e:	f000 f9e1 	bl	8003824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2160      	movs	r1, #96	; 0x60
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa84 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 800346e:	e019      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	461a      	mov	r2, r3
 800347e:	f000 f965 	bl	800374c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fa74 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 800348e:	e009      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 fa6b 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 80034a0:	e000      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <TIM_Base_SetConfig+0x114>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d00f      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3d      	ldr	r2, [pc, #244]	; (800363c <TIM_Base_SetConfig+0x118>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3c      	ldr	r2, [pc, #240]	; (8003640 <TIM_Base_SetConfig+0x11c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3b      	ldr	r2, [pc, #236]	; (8003644 <TIM_Base_SetConfig+0x120>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <TIM_Base_SetConfig+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <TIM_Base_SetConfig+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02b      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d027      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <TIM_Base_SetConfig+0x118>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d023      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <TIM_Base_SetConfig+0x11c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <TIM_Base_SetConfig+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <TIM_Base_SetConfig+0x124>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a28      	ldr	r2, [pc, #160]	; (800364c <TIM_Base_SetConfig+0x128>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <TIM_Base_SetConfig+0x12c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <TIM_Base_SetConfig+0x130>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0x134>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <TIM_Base_SetConfig+0x138>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <TIM_Base_SetConfig+0x13c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0xf8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <TIM_Base_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40010400 	.word	0x40010400
 800364c:	40014000 	.word	0x40014000
 8003650:	40014400 	.word	0x40014400
 8003654:	40014800 	.word	0x40014800
 8003658:	40001800 	.word	0x40001800
 800365c:	40001c00 	.word	0x40001c00
 8003660:	40002000 	.word	0x40002000

08003664 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a28      	ldr	r2, [pc, #160]	; (8003730 <TIM_TI1_SetConfig+0xcc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01b      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d017      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a25      	ldr	r2, [pc, #148]	; (8003734 <TIM_TI1_SetConfig+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a24      	ldr	r2, [pc, #144]	; (8003738 <TIM_TI1_SetConfig+0xd4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a23      	ldr	r2, [pc, #140]	; (800373c <TIM_TI1_SetConfig+0xd8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <TIM_TI1_SetConfig+0xdc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a21      	ldr	r2, [pc, #132]	; (8003744 <TIM_TI1_SetConfig+0xe0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_TI1_SetConfig+0x66>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <TIM_TI1_SetConfig+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <TIM_TI1_SetConfig+0x6a>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <TIM_TI1_SetConfig+0x6c>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e003      	b.n	80036ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f023 030a 	bic.w	r3, r3, #10
 8003708:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 030a 	and.w	r3, r3, #10
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40001800 	.word	0x40001800

0800374c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0201 	bic.w	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 030a 	bic.w	r3, r3, #10
 8003788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b087      	sub	sp, #28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 0210 	bic.w	r2, r3, #16
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0210 	bic.w	r2, r3, #16
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800384e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 0303 	bic.w	r3, r3, #3
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800393a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	031b      	lsls	r3, r3, #12
 8003940:	b29b      	uxth	r3, r3
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800394e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	f043 0307 	orr.w	r3, r3, #7
 8003998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	021a      	lsls	r2, r3, #8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e032      	b.n	8003a6a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_ZdlPvj>:
 8003a9e:	f000 b802 	b.w	8003aa6 <_ZdlPv>

08003aa2 <_Znaj>:
 8003aa2:	f000 b802 	b.w	8003aaa <_Znwj>

08003aa6 <_ZdlPv>:
 8003aa6:	f000 b853 	b.w	8003b50 <free>

08003aaa <_Znwj>:
 8003aaa:	b510      	push	{r4, lr}
 8003aac:	2800      	cmp	r0, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	4604      	movne	r4, r0
 8003ab2:	2401      	moveq	r4, #1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f000 f843 	bl	8003b40 <malloc>
 8003aba:	b930      	cbnz	r0, 8003aca <_Znwj+0x20>
 8003abc:	f000 f806 	bl	8003acc <_ZSt15get_new_handlerv>
 8003ac0:	b908      	cbnz	r0, 8003ac6 <_Znwj+0x1c>
 8003ac2:	f000 f80b 	bl	8003adc <abort>
 8003ac6:	4780      	blx	r0
 8003ac8:	e7f4      	b.n	8003ab4 <_Znwj+0xa>
 8003aca:	bd10      	pop	{r4, pc}

08003acc <_ZSt15get_new_handlerv>:
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <_ZSt15get_new_handlerv+0xc>)
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	f3bf 8f5b 	dmb	ish
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	200006b0 	.word	0x200006b0

08003adc <abort>:
 8003adc:	b508      	push	{r3, lr}
 8003ade:	2006      	movs	r0, #6
 8003ae0:	f000 f91e 	bl	8003d20 <raise>
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7fd fc73 	bl	80013d0 <_exit>
	...

08003aec <__errno>:
 8003aec:	4b01      	ldr	r3, [pc, #4]	; (8003af4 <__errno+0x8>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	2000001c 	.word	0x2000001c

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4e0d      	ldr	r6, [pc, #52]	; (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	; (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1ba4      	subs	r4, r4, r6
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2500      	movs	r5, #0
 8003b04:	42a5      	cmp	r5, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4e0b      	ldr	r6, [pc, #44]	; (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	; (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f926 	bl	8003d5c <_init>
 8003b10:	1ba4      	subs	r4, r4, r6
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2500      	movs	r5, #0
 8003b16:	42a5      	cmp	r5, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b20:	4798      	blx	r3
 8003b22:	3501      	adds	r5, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2a:	4798      	blx	r3
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003da8 	.word	0x08003da8
 8003b34:	08003da8 	.word	0x08003da8
 8003b38:	08003da8 	.word	0x08003da8
 8003b3c:	08003db0 	.word	0x08003db0

08003b40 <malloc>:
 8003b40:	4b02      	ldr	r3, [pc, #8]	; (8003b4c <malloc+0xc>)
 8003b42:	4601      	mov	r1, r0
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	f000 b859 	b.w	8003bfc <_malloc_r>
 8003b4a:	bf00      	nop
 8003b4c:	2000001c 	.word	0x2000001c

08003b50 <free>:
 8003b50:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <free+0xc>)
 8003b52:	4601      	mov	r1, r0
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f000 b803 	b.w	8003b60 <_free_r>
 8003b5a:	bf00      	nop
 8003b5c:	2000001c 	.word	0x2000001c

08003b60 <_free_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4605      	mov	r5, r0
 8003b64:	2900      	cmp	r1, #0
 8003b66:	d045      	beq.n	8003bf4 <_free_r+0x94>
 8003b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b6c:	1f0c      	subs	r4, r1, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bfb8      	it	lt
 8003b72:	18e4      	addlt	r4, r4, r3
 8003b74:	f000 f8f0 	bl	8003d58 <__malloc_lock>
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <_free_r+0x98>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	b933      	cbnz	r3, 8003b8e <_free_r+0x2e>
 8003b80:	6063      	str	r3, [r4, #4]
 8003b82:	6014      	str	r4, [r2, #0]
 8003b84:	4628      	mov	r0, r5
 8003b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b8a:	f000 b8e6 	b.w	8003d5a <__malloc_unlock>
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	d90c      	bls.n	8003bac <_free_r+0x4c>
 8003b92:	6821      	ldr	r1, [r4, #0]
 8003b94:	1862      	adds	r2, r4, r1
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf04      	itt	eq
 8003b9a:	681a      	ldreq	r2, [r3, #0]
 8003b9c:	685b      	ldreq	r3, [r3, #4]
 8003b9e:	6063      	str	r3, [r4, #4]
 8003ba0:	bf04      	itt	eq
 8003ba2:	1852      	addeq	r2, r2, r1
 8003ba4:	6022      	streq	r2, [r4, #0]
 8003ba6:	6004      	str	r4, [r0, #0]
 8003ba8:	e7ec      	b.n	8003b84 <_free_r+0x24>
 8003baa:	4613      	mov	r3, r2
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	b10a      	cbz	r2, 8003bb4 <_free_r+0x54>
 8003bb0:	42a2      	cmp	r2, r4
 8003bb2:	d9fa      	bls.n	8003baa <_free_r+0x4a>
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	1858      	adds	r0, r3, r1
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d10b      	bne.n	8003bd4 <_free_r+0x74>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	4401      	add	r1, r0
 8003bc0:	1858      	adds	r0, r3, r1
 8003bc2:	4282      	cmp	r2, r0
 8003bc4:	6019      	str	r1, [r3, #0]
 8003bc6:	d1dd      	bne.n	8003b84 <_free_r+0x24>
 8003bc8:	6810      	ldr	r0, [r2, #0]
 8003bca:	6852      	ldr	r2, [r2, #4]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	4401      	add	r1, r0
 8003bd0:	6019      	str	r1, [r3, #0]
 8003bd2:	e7d7      	b.n	8003b84 <_free_r+0x24>
 8003bd4:	d902      	bls.n	8003bdc <_free_r+0x7c>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	e7d3      	b.n	8003b84 <_free_r+0x24>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	1821      	adds	r1, r4, r0
 8003be0:	428a      	cmp	r2, r1
 8003be2:	bf04      	itt	eq
 8003be4:	6811      	ldreq	r1, [r2, #0]
 8003be6:	6852      	ldreq	r2, [r2, #4]
 8003be8:	6062      	str	r2, [r4, #4]
 8003bea:	bf04      	itt	eq
 8003bec:	1809      	addeq	r1, r1, r0
 8003bee:	6021      	streq	r1, [r4, #0]
 8003bf0:	605c      	str	r4, [r3, #4]
 8003bf2:	e7c7      	b.n	8003b84 <_free_r+0x24>
 8003bf4:	bd38      	pop	{r3, r4, r5, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200006b4 	.word	0x200006b4

08003bfc <_malloc_r>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	1ccd      	adds	r5, r1, #3
 8003c00:	f025 0503 	bic.w	r5, r5, #3
 8003c04:	3508      	adds	r5, #8
 8003c06:	2d0c      	cmp	r5, #12
 8003c08:	bf38      	it	cc
 8003c0a:	250c      	movcc	r5, #12
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	4606      	mov	r6, r0
 8003c10:	db01      	blt.n	8003c16 <_malloc_r+0x1a>
 8003c12:	42a9      	cmp	r1, r5
 8003c14:	d903      	bls.n	8003c1e <_malloc_r+0x22>
 8003c16:	230c      	movs	r3, #12
 8003c18:	6033      	str	r3, [r6, #0]
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	f000 f89b 	bl	8003d58 <__malloc_lock>
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <_malloc_r+0xac>)
 8003c24:	6814      	ldr	r4, [r2, #0]
 8003c26:	4621      	mov	r1, r4
 8003c28:	b991      	cbnz	r1, 8003c50 <_malloc_r+0x54>
 8003c2a:	4c20      	ldr	r4, [pc, #128]	; (8003cac <_malloc_r+0xb0>)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b91b      	cbnz	r3, 8003c38 <_malloc_r+0x3c>
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 f83d 	bl	8003cb0 <_sbrk_r>
 8003c36:	6020      	str	r0, [r4, #0]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f000 f838 	bl	8003cb0 <_sbrk_r>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d124      	bne.n	8003c8e <_malloc_r+0x92>
 8003c44:	230c      	movs	r3, #12
 8003c46:	6033      	str	r3, [r6, #0]
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 f886 	bl	8003d5a <__malloc_unlock>
 8003c4e:	e7e4      	b.n	8003c1a <_malloc_r+0x1e>
 8003c50:	680b      	ldr	r3, [r1, #0]
 8003c52:	1b5b      	subs	r3, r3, r5
 8003c54:	d418      	bmi.n	8003c88 <_malloc_r+0x8c>
 8003c56:	2b0b      	cmp	r3, #11
 8003c58:	d90f      	bls.n	8003c7a <_malloc_r+0x7e>
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	50cd      	str	r5, [r1, r3]
 8003c5e:	18cc      	adds	r4, r1, r3
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f87a 	bl	8003d5a <__malloc_unlock>
 8003c66:	f104 000b 	add.w	r0, r4, #11
 8003c6a:	1d23      	adds	r3, r4, #4
 8003c6c:	f020 0007 	bic.w	r0, r0, #7
 8003c70:	1ac3      	subs	r3, r0, r3
 8003c72:	d0d3      	beq.n	8003c1c <_malloc_r+0x20>
 8003c74:	425a      	negs	r2, r3
 8003c76:	50e2      	str	r2, [r4, r3]
 8003c78:	e7d0      	b.n	8003c1c <_malloc_r+0x20>
 8003c7a:	428c      	cmp	r4, r1
 8003c7c:	684b      	ldr	r3, [r1, #4]
 8003c7e:	bf16      	itet	ne
 8003c80:	6063      	strne	r3, [r4, #4]
 8003c82:	6013      	streq	r3, [r2, #0]
 8003c84:	460c      	movne	r4, r1
 8003c86:	e7eb      	b.n	8003c60 <_malloc_r+0x64>
 8003c88:	460c      	mov	r4, r1
 8003c8a:	6849      	ldr	r1, [r1, #4]
 8003c8c:	e7cc      	b.n	8003c28 <_malloc_r+0x2c>
 8003c8e:	1cc4      	adds	r4, r0, #3
 8003c90:	f024 0403 	bic.w	r4, r4, #3
 8003c94:	42a0      	cmp	r0, r4
 8003c96:	d005      	beq.n	8003ca4 <_malloc_r+0xa8>
 8003c98:	1a21      	subs	r1, r4, r0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f808 	bl	8003cb0 <_sbrk_r>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d0cf      	beq.n	8003c44 <_malloc_r+0x48>
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	e7db      	b.n	8003c60 <_malloc_r+0x64>
 8003ca8:	200006b4 	.word	0x200006b4
 8003cac:	200006b8 	.word	0x200006b8

08003cb0 <_sbrk_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4c06      	ldr	r4, [pc, #24]	; (8003ccc <_sbrk_r+0x1c>)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	f7fd fb92 	bl	80013e4 <_sbrk>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d102      	bne.n	8003cca <_sbrk_r+0x1a>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	b103      	cbz	r3, 8003cca <_sbrk_r+0x1a>
 8003cc8:	602b      	str	r3, [r5, #0]
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	200006c0 	.word	0x200006c0

08003cd0 <_raise_r>:
 8003cd0:	291f      	cmp	r1, #31
 8003cd2:	b538      	push	{r3, r4, r5, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	d904      	bls.n	8003ce4 <_raise_r+0x14>
 8003cda:	2316      	movs	r3, #22
 8003cdc:	6003      	str	r3, [r0, #0]
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ce6:	b112      	cbz	r2, 8003cee <_raise_r+0x1e>
 8003ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cec:	b94b      	cbnz	r3, 8003d02 <_raise_r+0x32>
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f000 f830 	bl	8003d54 <_getpid_r>
 8003cf4:	462a      	mov	r2, r5
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cfe:	f000 b817 	b.w	8003d30 <_kill_r>
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00a      	beq.n	8003d1c <_raise_r+0x4c>
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	d103      	bne.n	8003d12 <_raise_r+0x42>
 8003d0a:	2316      	movs	r3, #22
 8003d0c:	6003      	str	r3, [r0, #0]
 8003d0e:	2001      	movs	r0, #1
 8003d10:	e7e7      	b.n	8003ce2 <_raise_r+0x12>
 8003d12:	2400      	movs	r4, #0
 8003d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d18:	4628      	mov	r0, r5
 8003d1a:	4798      	blx	r3
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	e7e0      	b.n	8003ce2 <_raise_r+0x12>

08003d20 <raise>:
 8003d20:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <raise+0xc>)
 8003d22:	4601      	mov	r1, r0
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	f7ff bfd3 	b.w	8003cd0 <_raise_r>
 8003d2a:	bf00      	nop
 8003d2c:	2000001c 	.word	0x2000001c

08003d30 <_kill_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4c07      	ldr	r4, [pc, #28]	; (8003d50 <_kill_r+0x20>)
 8003d34:	2300      	movs	r3, #0
 8003d36:	4605      	mov	r5, r0
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	f7fd fb37 	bl	80013b0 <_kill>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d102      	bne.n	8003d4c <_kill_r+0x1c>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	b103      	cbz	r3, 8003d4c <_kill_r+0x1c>
 8003d4a:	602b      	str	r3, [r5, #0]
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
 8003d4e:	bf00      	nop
 8003d50:	200006c0 	.word	0x200006c0

08003d54 <_getpid_r>:
 8003d54:	f7fd bb24 	b.w	80013a0 <_getpid>

08003d58 <__malloc_lock>:
 8003d58:	4770      	bx	lr

08003d5a <__malloc_unlock>:
 8003d5a:	4770      	bx	lr

08003d5c <_init>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	bf00      	nop
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr

08003d68 <_fini>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr
